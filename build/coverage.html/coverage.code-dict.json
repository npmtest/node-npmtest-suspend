{"/home/travis/build/npmtest/node-npmtest-suspend/test.js":"/* istanbul instrument in package npmtest_suspend */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-suspend/lib.npmtest_suspend.js":"/* istanbul instrument in package npmtest_suspend */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_suspend = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_suspend = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-suspend/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-suspend && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_suspend */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_suspend\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_suspend.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_suspend.rollup.js'] =\n            local.assetsDict['/assets.npmtest_suspend.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_suspend.__dirname + '/lib.npmtest_suspend.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-suspend/node_modules/suspend/lib/suspend.js":"var Promise = require('promise/lib/es6-extensions');\n\n/**\n * Our suspend namespace, which doubles as an alias for `suspend.fn` (although\n * at the code level it may be more accurate to say that `suspend.fn` is an\n * alias for `suspend`...\n * Accepts a generator and returns a new function that makes no assumptions\n * regarding callback and/or error conventions.\n */\nvar suspend = module.exports = function fn(generator) {\n\tif (!isGeneratorFunction(generator)) {\n\t\tthrow new Error('First .fn() argument must be a GeneratorFunction.');\n\t}\n\n\treturn function() {\n\t\tvar suspender = new Suspender(generator);\n\t\t// preserve `this` context\n\t\tsuspender.start(this, Array.prototype.slice.call(arguments));\n\t};\n};\nsuspend.fn = suspend;\n\n/**\n * Accepts a generator, and returns a new function that follows Node's callback\n * conventions.  The callback is required.\n */\n suspend.callback = function callback(generator) {\n\tif (!isGeneratorFunction(generator)) {\n\t\tthrow new Error('First .callback() argument must be a GeneratorFunction.');\n\t}\n\n\treturn function() {\n\t\tvar callback = arguments[arguments.length - 1],\n\t\t\targs = Array.prototype.slice.call(arguments, 0, -1);\n\n\t\tif (typeof callback !== 'function') {\n\t\t\tthrow new Error('Last argument must be a callback function.');\n\t\t}\n\n\t\tvar suspender = new Suspender(generator, callback);\n\t\t// preserve `this` context\n\t\tsuspender.start(this, args);\n\t};\n};\n\n/**\n * Accepts a generator, and returns a new function that returns a promise.\n */\n suspend.promise = function promise(generator) {\n\tif (!isGeneratorFunction(generator)) {\n\t\tthrow new Error('First .promise() argument must be a GeneratorFunction.');\n\t}\n\n\treturn function() {\n\t\tvar self = this,\n\t\t\targs = Array.prototype.slice.call(arguments);\n\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tvar suspender = new Suspender(generator, function(err, ret) {\n\t\t\t\terr ? reject(err) : resolve(ret);\n\t\t\t});\n\t\t\tsuspender.start(self, args);\n\t\t});\n\t};\n};\n\n/**\n * Accepts a generator and an optional callback.  The generator is invoked\n * immediately - any errors or returned values are passed to the callback.\n */\nsuspend.run = function run(generator, callback) {\n\tif (!isGeneratorFunction(generator)) {\n\t\tthrow new Error('First .run() argument must be a GeneratorFunction.');\n\t}\n\tif (callback && typeof callback !== 'function') {\n\t\tthrow new Error('Second .run() argument must be a callback function.');\n\t}\n\tvar suspender = new Suspender(generator, callback);\n\t// preserve `this` context\n\tsuspender.start(this);\n};\n\n/**\n * Factory method for creating node-style callbacks that know how to resume\n * execution of the generator.  The callback expects the first argument to be\n * an error, if it occurred, or the completion value as the second argument.\n */\nsuspend.resume = function resumeFactory() {\n\tvar suspender = getActiveSuspender();\n\tif (!suspender) {\n\t\tthrow new Error('resume() must be called from the generator body.');\n\t}\n\n\tvar alreadyResumed = false;\n\n\treturn function resume() {\n\t\tif (alreadyResumed) {\n\t\t\tthrow new Error('Cannot call same resumer multiple times.');\n\t\t}\n\t\talreadyResumed = true;\n\t\tsuspender.resume.apply(suspender, arguments);\n\t};\n};\n\n/**\n * Factory method for creating a callback that doesn't make any assumptions\n * regarding Node's callback conventions.  All arguments passed to it are made\n * available in an array.\n */\nsuspend.resumeRaw = function resumeRawFactory() {\n\tvar resume = suspend.resume.apply(this, arguments);\n\tgetActiveSuspender().rawResume = true;\n\treturn resume;\n};\n\n/**\n * Used for \"forking\" parallel operations. Rather than resuming the generator,\n * completion values are stored until a subsequent `.join()` operation.\n */\nsuspend.fork = function fork() {\n\tvar suspender = getActiveSuspender();\n\tif (!suspender) {\n\t\tthrow new Error('fork() must be called from the generator body.');\n\t}\n\treturn suspender.forkFactory();\n};\n\n/**\n * Similar to `resume()`, except that the resulting value is an array of all\n * the completion values from previous `fork()` operations.\n */\nsuspend.join = function join() {\n\tvar suspender = getActiveSuspender();\n\tif (!suspender) {\n\t\tthrow new Error('join() must be called from the generator body.');\n\t}\n\tif (suspender.pendingJoin) {\n\t\tthrow new Error('There is already a join() pending unresolved forks.');\n\t}\n\tsuspender.join();\n};\n\n/**\n * Constructor function used for \"wrapping\" generator. Manages the state and\n * interactions with a suspend-wrapped generator.\n */\nfunction Suspender(generator, callback) {\n\tvar self = this;\n\n\tthis.generator = generator;\n\t// initialized in start()\n\tthis.iterator = null;\n\t// flag to keep track of whether or not the entire generator completed.\n\t// See start() for state tracking.\n\tthis.syncComplete = true;\n\t// makes sure to not unleash zalgo: https://github.com/jmar777/suspend/pull/21\n\tthis.callback = callback && function() {\n\t\tif (self.syncComplete) {\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\tsetImmediate(function() {\n\t\t\t\tcallback.apply(this, args);\n\t\t\t});\n\t\t} else {\n\t\t\tcallback.apply(this, arguments);\n\t\t}\n\t};\n\t// flag indicating whether or not the iterator has completed\n\tthis.done = false;\n\t// flag to keep track of whether or not we were resumed synchronously.\n\t// See nextOrThrow() for state tracking.\n\tthis.syncResume = false;\n\t// flag indicating whether or not the values passed to resume() should be\n\t// treated as raw values, or handled per the error-first callback convention\n\tthis.rawResume = false;\n\t// holding place for values from forked operations, waiting for a join()\n\tthis.forkValues = [];\n\t// number of pending forks we have out there\n\tthis.pendingForks = 0;\n\t// index used for preserving fork result positions\n\tthis.forkIndex = 0;\n\t// flag indicating whether or not we have a pending join operation (which\n\t// waits until all forks are resolved)\n\tthis.pendingJoin = false;\n}\n\n/**\n * Starts the generator and begins iteration.\n */\nSuspender.prototype.start = function start(ctx, args) {\n\tthis.iterator = this.generator.apply(ctx, args);\n\tthis.nextOrThrow();\n\tthis.syncComplete = false;\n};\n\n/**\n * Handles values that are yielded from the generator (such as promises).\n */\nSuspender.prototype.handleYield = function handleYield(ret) {\n\tif (ret.done) {\n\t\tthis.done = true;\n\t\tif (this.callback) {\n\t\t\tthis.callback.call(null, null, ret.value);\n\t\t}\n\t\treturn;\n\t}\n\n\t// if nothing was yielded, then assume that resume()/join() are being used\n\tif (!ret.value) return;\n\n\t// check if a promise was yielded\n\tif (typeof ret.value.then === 'function') {\n\t\t// todo: may be more efficient to have a single instance-level resume\n\t\t// function\n\t\tret.value.then(this.resume.bind(this, null), this.resume.bind(this));\n\t}\n};\n\n/**\n * Calls `.next()` or `.throw()` on the iterator, depending on the value of the\n * `isError` flag.  This method ensures that yielded values and thrown errors\n * will be properly handled, and helps keep track of whether or not we are\n * resumed synchronously.\n */\nSuspender.prototype.nextOrThrow = function next(val, isError) {\n\tvar self = this;\n\n\tthis.syncResume = true;\n\tsetActiveSuspender(this);\n\tvar ret;\n\ttry {\n\t\tret = isError ? this.iterator.throw(val) : this.iterator.next(val);\n\t} catch (err) {\n\t\t// prevents promise swallowing: https://github.com/jmar777/suspend/pull/21\n\t\tsetImmediate(function() {\n\t\t\tif (self.callback) {\n\t\t\t\treturn self.callback(err);\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t});\n\t\treturn;\n\t} finally {\n\t\tthis.syncResume = false;\n\t\tclearActiveSuspender();\n\t}\n\t// everything was ok, so keep going\n\tthis.handleYield(ret);\n};\n\n/**\n * Resumes execution of the generator once an async operation has completed.\n */\nSuspender.prototype.resume = function resume(err, result) {\n\t// if we have been synchronously resumed, then wait for the next turn on\n\t// the event loop (avoids 'Generator already running' errors).\n\tif (this.syncResume) {\n\t\treturn setImmediate(this.resume.bind(this, err, result));\n\t}\n\n\tif (this.rawResume) {\n\t\tthis.rawResume = false;\n\t\tthis.nextOrThrow(Array.prototype.slice.call(arguments));\n\t} else {\n\t\tif (this.done) {\n\t\t\tthrow new Error('Generators cannot be resumed once completed.');\n\t\t}\n\n\t\tif (err) return this.nextOrThrow(err, true);\n\n\t\tthis.nextOrThrow(result);\n\t}\n};\n\n/**\n * Returns a fork continuation that stashes the fulfillment value until `join()`\n * is subsequently called.\n */\nSuspender.prototype.forkFactory = function forkFactory() {\n\tvar self = this,\n\t\tindex = this.forkIndex++,\n\t\talreadyFulfilled = false;\n\tthis.pendingForks++;\n\treturn function fork() {\n\t\tif (alreadyFulfilled) {\n\t\t\tthrow new Error('fork was fulfilled more than once.');\n\t\t}\n\t\talreadyFulfilled = true;\n\t\tself.forkValues[index] = Array.prototype.slice.call(arguments);\n\t\tif (--self.pendingForks === 0 && self.pendingJoin) {\n\t\t\tself.join();\n\t\t}\n\t};\n};\n\n/**\n * Causes the generator to be resumed (with the values of any previous `fork()`\n * fulfillments).\n */\nSuspender.prototype.join = function join() {\n\tthis.pendingJoin || (this.pendingJoin = true);\n\tif (this.pendingForks) return;\n\tvar err = null,\n\t\tresults = [];\n\tfor (var i = 0, len = this.forkValues.length; i < len; i++) {\n\t\tvar forkValue = this.forkValues[i];\n\t\tif (forkValue[0]) {\n\t\t\terr = forkValue[0];\n\t\t\tbreak;\n\t\t} else {\n\t\t\tresults[i] = forkValue[1];\n\t\t}\n\t}\n\t// reset fork/join state\n\tthis.pendingJoin = false;\n\tthis.pendingForks = 0;\n\tthis.forkIndex = 0;\n\tthis.forkValues.length = 0;\n\n\t// resume the generator with our fork/join results\n\tthis.resume(err, results);\n};\n\n// keep track of the currently active generator (used by the resumer factory).\nvar suspenderStack = [];\n\nfunction setActiveSuspender(suspender) {\n\tsuspenderStack.push(suspender);\n}\n\nfunction getActiveSuspender() {\n\treturn suspenderStack[suspenderStack.length - 1];\n}\n\nfunction clearActiveSuspender() {\n\tsuspenderStack.pop();\n}\n\nfunction isGeneratorFunction(v) {\n\treturn v && v.constructor && v.constructor.name === 'GeneratorFunction';\n}\n","/home/travis/build/npmtest/node-npmtest-suspend/node_modules/suspend/Gruntfile.js":"module.exports = function(grunt) {\n\tgrunt.initConfig({\n\t\tjshint: {\n\t\t\tfiles: ['lib/suspend.js'],\n\t\t\toptions: {\n\t\t\t\tcamelcase: true,\n\t\t\t\teqeqeq: true,\n\t\t\t\tundef: true,\n\t\t\t\tunused: true,\n\t\t\t\ttrailing: true,\n\t\t\t\tboss: true,\n\t\t\t\tbrowser: true,\n\t\t\t\texpr: true,\n\t\t\t\tglobals: {\n\t\t\t\t\tmodule: true,\n\t\t\t\t\tsetImmediate: true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tgrunt.loadNpmTasks('grunt-contrib-jshint');\n};\n"}